<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docx库操作入门</title>
      <link href="/2020/06/20/docx%E5%BA%93%E6%93%8D%E4%BD%9C%E5%85%A5%E9%97%A8/"/>
      <url>/2020/06/20/docx%E5%BA%93%E6%93%8D%E4%BD%9C%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>docx库的下载指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-docx</span><br></pre></td></tr></table></figure><h2 id="1、文档"><a href="#1、文档" class="headerlink" title="1、文档"></a>1、文档</h2><p><strong>创建文档</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line">document = Document()</span><br></pre></td></tr></table></figure><p><strong>保存文档</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.save(<span class="string">'test.docx'</span>)</span><br></pre></td></tr></table></figure><p><strong>打开现有文档</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document = Document(<span class="string">'filename.docx'</span>)  <span class="comment"># 打开</span></span><br><span class="line">document.save(<span class="string">'new-filename.docx'</span>)  <span class="comment">#保存文档</span></span><br></pre></td></tr></table></figure><p>如果使用相同的文件名来打开和保存文件，将默认覆盖原文件</p><p><strong>打开file-like文档</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'a.docx'</span>, <span class="string">'rb'</span>)</span><br><span class="line">document = DOcument(f)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.docx'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">source_stream = StringIO(f.read())</span><br><span class="line">document = Document(source_stream)</span><br><span class="line">source_stream.close()</span><br><span class="line"></span><br><span class="line">target_stream = StringIO()</span><br><span class="line">document.save(target_stream)</span><br></pre></td></tr></table></figure><h2 id="2、段落"><a href="#2、段落" class="headerlink" title="2、段落"></a>2、段落</h2><p><strong>添加段落</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paragraph = document.add_paragraph(<span class="string">"This is the first paragraph"</span>)</span><br></pre></td></tr></table></figure><p>作用：在文档末尾添加一个新的段落，并返回该段落的引用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prior_paragraph = paragraph.insert_paragraph_before(<span class="string">"such a good boy"</span>)</span><br></pre></td></tr></table></figure><p>作用：以某个段落为基准，在这个段落前添加一个新的段落。</p><p><strong>添加段落风格</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paragraph.style = <span class="string">"List Bullet"</span></span><br></pre></td></tr></table></figure><p>这种风格使得段落看起来像子弹头。</p><p><strong>在段落中添加内容</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run = paragraph.add_run(<span class="string">"it is wonderful"</span>)</span><br><span class="line">run = paragraph.add_run(<span class="string">"it is wonderful"</span>, <span class="string">"Emphasis"</span>)  <span class="comment"># 创建时指定风格</span></span><br></pre></td></tr></table></figure><p>这还将返回一个对字符串”it is wonderful”的引用，我们可以对这个字符串进行格式的设置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run.bold = <span class="literal">True</span>  <span class="comment"># 设置为粗体</span></span><br><span class="line">run.italic = <span class="literal">True</span>  <span class="comment"># 设置为斜体</span></span><br><span class="line">run.style = <span class="string">"Emphasis"</span> <span class="comment"># 创建后设置风格</span></span><br></pre></td></tr></table></figure><p><strong>设置段落格式</strong></p><p>段落的对齐方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> docx.enum.text <span class="keyword">import</span> WD_ALIGN_PARAGRAPH</span><br><span class="line"></span><br><span class="line">paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER  <span class="comment"># 设置为居中对齐</span></span><br></pre></td></tr></table></figure><p>段落的缩进</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">paragraph.paragraph_format.left_indent = Inches(<span class="number">0.5</span>)  <span class="comment"># 向左缩进</span></span><br><span class="line">paragraph.paragraph_format.right_indent = Inches(<span class="number">0.5</span>)  <span class="comment"># 向右缩进</span></span><br><span class="line">paragraph.paragraph_format.first_line_indent = Inches(<span class="number">0.5</span>)  <span class="comment">#第一行缩进</span></span><br></pre></td></tr></table></figure><p><strong>段落间隔</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> docx.shared <span class="keyword">import</span> Pt</span><br><span class="line"></span><br><span class="line">paragraph.paragraph_format.space_before = Pt(<span class="number">18</span>)</span><br><span class="line">paragraph.paragraph_format.space_after = Pt(<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p><strong>行间距</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paragraph.paragraph_format.line_spacing &#x3D; Pt(18)</span><br></pre></td></tr></table></figure><p>分页属性：</p><p>keep_together：使整个段落出现在同一页上，如果该段落可能被分割成两页，则在该段之前加入分页符。</p><p>keep_with_next：保持与下一段保持一个段落在相同的页面。</p><p>page_break_before：使用分页符将段落放置在新页的顶部。</p><p>widow_control：避免将该段的第一行或最后一行放在与该段其余部分分开的页面上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">paragraph.paragraph_format.keep_together = <span class="literal">True</span></span><br><span class="line">paragraph.paragraph_format.keep_with_next = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="3、标题"><a href="#3、标题" class="headerlink" title="3、标题"></a>3、标题</h2><p><strong>添加标题</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.add_heading(<span class="string">'My first doc created by python'</span>)</span><br></pre></td></tr></table></figure><p>作用：添加一个顶级标题。</p><p>标题共有9级，可通过level属性来指定级数，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.add_heading(<span class="string">'My first doc created by python'</span>, level=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>会创建一个3级标题。</p><p>若指定级别为0，则将创建一个段落</p><h2 id="4、分页符"><a href="#4、分页符" class="headerlink" title="4、分页符"></a>4、分页符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.add_page_break()</span><br></pre></td></tr></table></figure><p>作用：无论所在页面是否已满，都将转到一个新的页面上</p><h2 id="5、表格"><a href="#5、表格" class="headerlink" title="5、表格"></a>5、表格</h2><p><strong>添加表格</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table = document.add_table(rows=<span class="number">2</span>, cols=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>作用：创建一个2行，2列的表格(可视作一个二维数组)</p><p><strong>获取引用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cell = table.cell(<span class="number">0</span>,<span class="number">1</span>)  <span class="comment"># 获取第一行第二列的元素的引用</span></span><br><span class="line">row = table.rows[<span class="number">1</span>]  <span class="comment"># 获取第二行的引用</span></span><br><span class="line">cell = row.cells[<span class="number">1</span>] <span class="comment">#  获取第二行(即上一行代码所获得的行)的第二个元素</span></span><br></pre></td></tr></table></figure><p><strong>方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cell.text = <span class="string">'hello, good morning'</span>  <span class="comment"># 修改单元格的文本</span></span><br><span class="line">row_count = len(table.rows)  <span class="comment"># 统计表格行数</span></span><br><span class="line">row = table.add_row()  <span class="comment"># 添加新的一行</span></span><br><span class="line">table.style = <span class="string">'LightShading-Acccent1'</span>  <span class="comment"># 表格样式</span></span><br></pre></td></tr></table></figure><h2 id="6、图片"><a href="#6、图片" class="headerlink" title="6、图片"></a>6、图片</h2><p><strong>添加图片</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.add_picture(&#39;snow.jpg&#39;)</span><br></pre></td></tr></table></figure><p>添加了一张文件名为”snow.jpg”的图片</p><p><strong>控制图片大小</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">form docx.shared <span class="keyword">import</span> Inches</span><br><span class="line"></span><br><span class="line">document.add_picture(<span class="string">'snow.jpg'</span>, width=Inches(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="7、字体设置"><a href="#7、字体设置" class="headerlink" title="7、字体设置"></a>7、字体设置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> docx.shared <span class="keyword">import</span> Pt</span><br><span class="line"><span class="keyword">from</span> docx.shared <span class="keyword">import</span> RGBColor</span><br><span class="line"><span class="keyword">from</span> docx.enum.dml <span class="keyword">import</span> MSO_THEME_COLOR</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run = document.add_paragraph().add_run()</span><br><span class="line">font = run.font</span><br><span class="line">font.name = <span class="string">'Calibri'</span>  <span class="comment">#字体种类</span></span><br><span class="line">font.size = Pt(<span class="number">12</span>)   <span class="comment">#字体大小</span></span><br><span class="line">font.bold = <span class="literal">True</span>  <span class="comment"># 粗体</span></span><br><span class="line">font.italic = <span class="literal">False</span>  <span class="comment"># 斜体</span></span><br><span class="line">font.underline = <span class="literal">True</span>  <span class="comment"># 下划线</span></span><br><span class="line">font.color.rgb = RGBColor(<span class="number">0x42</span>, <span class="number">0x24</span>, <span class="number">0xE9</span>)  <span class="comment"># 字体颜色</span></span><br><span class="line">font.clor.theme_color = MSO_THEME_COLOR.ACCENT_1  <span class="comment"># 设置配色</span></span><br><span class="line">font.color.rgb = <span class="literal">None</span>  <span class="comment"># 默认颜色</span></span><br></pre></td></tr></table></figure><h2 id="8、section属性"><a href="#8、section属性" class="headerlink" title="8、section属性"></a>8、section属性</h2><p><strong>section的使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sections = document.sections</span><br><span class="line">section = sections[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><strong>section的属性</strong></p><ul><li><p>start_type：这个部分之前的断开类型</p></li><li><p>orientation：页面方向</p></li><li><p>page_width：页面宽度</p></li><li><p>page_height：页面高度</p></li><li><p>left_margin：左边距</p></li><li><p>right_margin：右边距</p></li><li><p>top_margin：上边距</p></li><li><p>bottom_margin：下边距</p></li><li><p>gutter</p></li><li><p>header_distance</p></li><li><p>footer_distance</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">section.start_type = WD_SECTION.ODD_PAGE</span><br><span class="line">section.orientation = WD_ORIENT.LANDSCAPE</span><br><span class="line">section.page_width = new_width</span><br><span class="line">section.page_height = new_height</span><br><span class="line">section.left_margin = Inches(<span class="number">1.5</span>)</span><br><span class="line">section.right_margin = Inches(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="9、页眉和页脚"><a href="#9、页眉和页脚" class="headerlink" title="9、页眉和页脚"></a>9、页眉和页脚</h2><p>获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">section = document.sections[<span class="number">0</span>]</span><br><span class="line">header = section.header</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">paragraph &#x3D; header.paragraphs[0]</span><br><span class="line">paragraph.text &#x3D; &quot;Title of my document&quot;  # 在页眉添加内容</span><br><span class="line">paragraph.text &#x3D; &quot;Left Text\tCenter Text\tRight Text&quot;  #制表符用于分隔左、中和右对齐的标题内容</span><br><span class="line">paragraph.style &#x3D; document.styles[&#39;header&#39;]</span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header.is_linked_to_previous &#x3D; True</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docx </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown进阶篇——简单的公式编辑</title>
      <link href="/2020/06/20/markdown%E8%BF%9B%E9%98%B6%E7%AF%87%E2%80%94%E2%80%94%E7%AE%80%E5%8D%95%E7%9A%84%E5%85%AC%E5%BC%8F%E7%BC%96%E8%BE%91/"/>
      <url>/2020/06/20/markdown%E8%BF%9B%E9%98%B6%E7%AF%87%E2%80%94%E2%80%94%E7%AE%80%E5%8D%95%E7%9A%84%E5%85%AC%E5%BC%8F%E7%BC%96%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown进阶篇——简单的公式编辑"><a href="#markdown进阶篇——简单的公式编辑" class="headerlink" title="markdown进阶篇——简单的公式编辑"></a>markdown进阶篇——简单的公式编辑</h1><ol><li><p>在Typora中添加公式：</p><ul><li><p>添加一个简单的数学式：</p><p>进入Typora偏好设置界面，进入markdown设置，将markdown拓展语法全部勾选</p><p><img src="https://cdn.jsdelivr.net/gh/zhj12138/CloudImage@master/img/image-20200620213143506.png" alt="image-20200620213143506"></p><p>然后在Typora的编辑界面使用’$’符号包裹住你的LaTeX公式即可，用法类似添加简单的代码`。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是$a^2$</span><br></pre></td></tr></table></figure><p>效果：</p><p>这是$a^2$</p></li><li><p>添加一个较复杂的数学公式块，使用’$$’包裹注你的LaTeX公式即可，用法类似添加代码块```。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">a^2_1</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>效果：<br>$$<br>a^2_1<br>$$</p></li></ul></li><li><p>常用符号表：</p><table><thead><tr><th>符号</th><th align="left">示例</th><th>效果</th></tr></thead><tbody><tr><td>上标</td><td align="left"><code>$a^2$</code></td><td>$a^2$</td></tr><tr><td>下标</td><td align="left"><code>$a_2$</code></td><td>$a_2$</td></tr><tr><td>分式</td><td align="left"><code>$1/2$</code></td><td>$1/2$</td></tr><tr><td>分式</td><td align="left"><code>$\frac{1}{2}$</code></td><td>$\frac{1}{2}$</td></tr><tr><td>省略号</td><td align="left"><code>$\cdots$</code></td><td>$\cdots$</td></tr><tr><td>根号</td><td align="left"><code>$\sqrt[n]{m}$</code></td><td>$\sqrt[n]{m}$</td></tr><tr><td>矢量</td><td align="left"><code>$\vec{a}$</code></td><td>$\vec{a}$</td></tr><tr><td>积分</td><td align="left"><code>$\int{x}dx$</code></td><td>$\int{x}dx$</td></tr><tr><td>积分</td><td align="left"><code>$\int^{b}_{a}{x}dx$</code></td><td>$\int^{b}_{a}{x}dx$</td></tr><tr><td>极限</td><td align="left"><code>$\lim_{n \to \infin}{\frac{1}{n}}$</code></td><td>$\lim_{n \to \infin}{\frac{1}{n}}$</td></tr><tr><td>极限</td><td align="left"><code>$\lim\limits_{n \to \infin}{\frac{1}{n}}$</code></td><td>$\lim\limits_{n \to \infin}{\frac{1}{n}}$</td></tr><tr><td>极限</td><td align="left"><code>$\lim\limits_{n \to +\infin}{\frac{1}{n}}$</code></td><td>$\lim\limits_{n \to +\infin}{\frac{1}{n}}$</td></tr><tr><td>累加</td><td align="left"><code>$\sum_{n=1}^{+\infty}{a_n}$</code></td><td>$\sum_{n=1}^{+\infty}{a_n}$</td></tr><tr><td>累加</td><td align="left"><code>$\sum\limits_{n=1}^{+\infty}{a_n}$</code></td><td>$\sum\limits_{n=1}^{+\infty}{a_n}$</td></tr><tr><td>累乘</td><td align="left"><code>$\prod_{n=1}^{100}{a_n}$</code></td><td>$\prod_{n=1}^{100}{a_n}$</td></tr><tr><td>累乘</td><td align="left"><code>$\sum\limits_{n=1}^{100}{a_n}$</code></td><td>$\sum\limits_{n=1}^{100}{a_n}$</td></tr></tbody></table></li><li><p>希腊字母表：</p><table><thead><tr><th>markdown</th><th>字母</th></tr></thead><tbody><tr><td><code>$\alpha$</code></td><td>$\alpha$</td></tr><tr><td><code>$\beta$</code></td><td>$\beta$</td></tr><tr><td><code>$\gamma$</code></td><td>$\gamma$</td></tr><tr><td><code>$\delta$</code></td><td>$\delta$</td></tr><tr><td><code>$\epsilon$</code></td><td>$\epsilon$</td></tr><tr><td><code>$\varepsilon$</code></td><td>$\varepsilon$</td></tr><tr><td><code>$\zeta$</code></td><td>$\zeta$</td></tr><tr><td><code>$\eta$</code></td><td>$\eta$</td></tr><tr><td><code>$\theta$</code></td><td>$\theta$</td></tr><tr><td><code>$\iota$</code></td><td>$\iota$</td></tr><tr><td><code>$\kappa$</code></td><td>$\kappa$</td></tr><tr><td><code>$\lambda$</code></td><td>$\lambda$</td></tr><tr><td><code>$\mu$</code></td><td>$\mu$</td></tr><tr><td><code>$\nu$</code></td><td>$\nu$</td></tr><tr><td><code>$\xi$</code></td><td>$\xi$</td></tr><tr><td><code>$\omicron$</code></td><td>$\omicron$</td></tr><tr><td><code>$\pi$</code></td><td>$\pi$</td></tr><tr><td><code>$\rho$</code></td><td>$\rho$</td></tr><tr><td><code>$\sigma$</code></td><td>$\sigma$</td></tr><tr><td><code>$\tau$</code></td><td>$\tau$</td></tr><tr><td><code>$\upsilon$</code></td><td>$\upsilon$</td></tr><tr><td><code>$\phi$</code></td><td>$\phi$</td></tr><tr><td><code>$\varphi$</code></td><td>$\varphi$</td></tr><tr><td><code>$\chi$</code></td><td>$\chi$</td></tr><tr><td><code>$\psi$</code></td><td>$\psi$</td></tr><tr><td><code>$\omega$</code></td><td>$\omega$</td></tr></tbody></table></li><li><p>常用函数表：</p><table><thead><tr><th>函数</th><th>markdown</th><th>效果</th></tr></thead><tbody><tr><td>正弦函数</td><td><code>$\sin\alpha$</code></td><td>$\sin\alpha$</td></tr><tr><td>余弦函数</td><td><code>$\cos\beta$</code></td><td>$\cos\beta$</td></tr><tr><td>对数函数</td><td><code>$\ln(a+b)$</code></td><td>$\ln(a+b)$</td></tr><tr><td>对数函数</td><td><code>$\log_n(a+b)$</code></td><td>$\log_n(a+b)$</td></tr><tr><td>对数函数</td><td><code>$\lg10$</code></td><td>$\lg10$</td></tr></tbody></table></li><li><p>关系运算符：</p><table><thead><tr><th>markdown</th><th>效果</th></tr></thead><tbody><tr><td><code>$\pm$</code></td><td>$\pm$</td></tr><tr><td><code>$\times$</code></td><td>$\times$</td></tr><tr><td><code>$\cdot$</code></td><td>$\cdot$</td></tr><tr><td><code>$\div$</code></td><td>$\div$</td></tr><tr><td><code>$\neq$</code></td><td>$\neq$</td></tr><tr><td><code>$\equiv$</code></td><td>$\equiv$</td></tr><tr><td><code>$\leq$</code></td><td>$\leq$</td></tr><tr><td><code>$\geq$</code></td><td>$\geq$</td></tr></tbody></table></li><li><p>特殊字符：</p><table><thead><tr><th>markdown</th><th>效果</th></tr></thead><tbody><tr><td><code>$\forall$</code></td><td>$\forall$</td></tr><tr><td><code>$\infty$</code></td><td>$\infty$</td></tr><tr><td><code>$\emptyset$</code></td><td>$\emptyset$</td></tr><tr><td><code>$\exists$</code></td><td>$\exists$</td></tr><tr><td><code>$\nabla$</code></td><td>$\nabla$</td></tr><tr><td><code>$\bot$</code></td><td>$\bot$</td></tr><tr><td><code>$\angle$</code></td><td>$\angle$</td></tr><tr><td><code>$\because$</code></td><td>$\because$</td></tr><tr><td><code>$\therefore$</code></td><td>$\therefore$</td></tr></tbody></table></li></ol>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python正则表达式</title>
      <link href="/2020/06/09/python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/06/09/python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="导入正则表达式库"><a href="#导入正则表达式库" class="headerlink" title="导入正则表达式库"></a>导入正则表达式库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><h3 id="match函数"><a href="#match函数" class="headerlink" title="match函数"></a>match函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>对字符串的开头进行匹配，匹配失败将返回None</p><p>参数:</p><ul><li>pattern：正则表达式字符串</li><li>string：目标字符串</li><li>flags：<pre><code>* re.I     使匹配对大小写不敏感        * re.M   多行匹配        * re.S     拓展&quot;.&quot;的匹配，使其也能匹配换行符        * re.U     根据Unicode解析字符        * re.X              * re.L      本地化识别匹配</code></pre></li></ul><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(re.match(<span class="string">r'sn'</span>, <span class="string">'snow'</span>))</span><br><span class="line">print(re.match(<span class="string">r'sn'</span>, <span class="string">'snow'</span>).span())</span><br><span class="line">print(re.match(<span class="string">r'ow'</span>, <span class="string">'snow'</span>))  <span class="comment"># 倘若无匹配，则不能使用span方法，否则会报错</span></span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://cdn.jsdelivr.net/gh/zhj12138/CloudImage@master/img/image-20200610103805429.png" alt="image-20200610103805429"></p><p>返回对象的group方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">'great grass hello grey'</span></span><br><span class="line">match_obj = re.match(<span class="string">r'(.*) grass (.*)'</span>, string)</span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    print(match_obj.group())</span><br><span class="line">    print(match_obj.group(<span class="number">1</span>))</span><br><span class="line">    print(match_obj.group(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"No match"</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://cdn.jsdelivr.net/gh/zhj12138/CloudImage@master/img/image-20200610105558990.png" alt="image-20200610105558990"></p><p>flags使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">'great Grass hello grey'</span></span><br><span class="line">match_obj1 = re.match(<span class="string">r'(.*) grass (.*)'</span>, string)</span><br><span class="line">match_obj2 = re.match(<span class="string">r'(.*) grass (.*)'</span>, string, re.I)</span><br><span class="line"><span class="keyword">if</span> match_obj1:</span><br><span class="line">    print(<span class="string">"匹配成功"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"匹配失败"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> match_obj2:</span><br><span class="line">    print(<span class="string">"匹配成功"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"匹配失败"</span>)</span><br></pre></td></tr></table></figure><p>输出:</p><p><img src="https://cdn.jsdelivr.net/gh/zhj12138/CloudImage@master/img/image-20200610110338290.png" alt="image-20200610110338290"></p><p>使用多个标志：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(pattern, string, re.I|re.M)</span><br></pre></td></tr></table></figure><p>对字符串开头的理解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string1 &#x3D; &quot;he, great&quot;</span><br><span class="line">string2 &#x3D; &quot;he great&quot;</span><br><span class="line">string3 &#x3D; &quot;great&quot;</span><br><span class="line">print(re.match(&#39;gr&#39;, string1))</span><br><span class="line">print(re.match(&#39;gr&#39;, string2))</span><br><span class="line">print(re.match(&#39;gr&#39;, string3))</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://cdn.jsdelivr.net/gh/zhj12138/CloudImage@master/img/image-20200610112158212.png" alt="image-20200610112158212"></p><h3 id="search方法"><a href="#search方法" class="headerlink" title="search方法"></a>search方法</h3><p>扫描整个字符串并返回第一个成功的匹配</p><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.search(pattern, string, flags&#x3D;0)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string &#x3D; &quot;great&quot;</span><br><span class="line">print(re.search(&#39;ea&#39;, string))</span><br><span class="line">print(re.search(&#39;gr&#39;, string))</span><br><span class="line"></span><br><span class="line"># 与match函数比较</span><br><span class="line">print(re.match(&#39;ea&#39;, string))</span><br><span class="line">print(re.match(&#39;gr&#39;, string))</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://cdn.jsdelivr.net/gh/zhj12138/CloudImage@master/img/image-20200610111344856.png" alt="image-20200610111344856"></p><p>返回对象的group方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">'great grass hello grey'</span></span><br><span class="line">search_obj = re.search(<span class="string">r'(.*)rass(.*)'</span>, string)</span><br><span class="line">match_obj = re.match(<span class="string">r'(.*)rass(.*)'</span>, string)</span><br><span class="line"><span class="keyword">if</span> search_obj:</span><br><span class="line">    print(search_obj.group())</span><br><span class="line">    print(search_obj.group(<span class="number">1</span>))</span><br><span class="line">    print(search_obj.group(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"No match"</span>)</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line"><span class="comment"># 与match对象比较</span></span><br><span class="line"><span class="keyword">if</span> match_obj:</span><br><span class="line">    print(match_obj.group())</span><br><span class="line">    print(match_obj.group(<span class="number">1</span>))</span><br><span class="line">    print(match_obj.group(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"No match"</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://cdn.jsdelivr.net/gh/zhj12138/CloudImage@master/img/image-20200610112932649.png" alt="image-20200610112932649"></p><h3 id="sub函数"><a href="#sub函数" class="headerlink" title="sub函数"></a>sub函数</h3><p>替换字符串中的匹配项</p><p>使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>repl：想要替换成的字符串， 或者为一个函数</li><li>count：替换的最大次数，默认为0，替换所有的匹配</li></ul><p>后两个参数可有可无</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string &#x3D; &#39;128919074391&#39;</span><br><span class="line">str2 &#x3D; re.sub(r&#39;9&#39;, &#39;望&#39;, string)</span><br><span class="line">print(str2)</span><br><span class="line">print(re.sub(r&#39;望&#39;, &#39;9&#39;, str2, 1))</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://cdn.jsdelivr.net/gh/zhj12138/CloudImage@master/img/image-20200610130804662.png" alt="image-20200610130804662"></p><p>tips：采用sub替换后，string本身并不改变</p><p>rpl作为函数的用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(match)</span>:</span></span><br><span class="line">    num = int(match.group(<span class="string">'a'</span>))</span><br><span class="line">    <span class="keyword">return</span> str(num*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">'ABCD12341324'</span></span><br><span class="line">str2 = re.sub(<span class="string">r'(?P&lt;a&gt;\d+)'</span>, double, string)</span><br><span class="line">print(str2)</span><br></pre></td></tr></table></figure><p>输出:</p><p><code>ABCD24682648</code></p><p>其中<code>?&lt;a&gt;</code>是添加一个组名为’a’的group</p><p>tips: 别忘了正则表达式里的括号</p><h3 id="compile函数"><a href="#compile函数" class="headerlink" title="compile函数"></a>compile函数</h3><p>编译正则表达式，生成一个正则表达式对象</p><p>用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.compile(pattern, flags)</span><br><span class="line">pattern.match(string, start, end)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</span><br><span class="line">matched1 = pattern.match(<span class="string">'123ABCD456ADBC789'</span>)</span><br><span class="line">matched2 = pattern.match(<span class="string">'123ABCD456ADBC789'</span>, <span class="number">3</span>, <span class="number">10</span>)</span><br><span class="line">matched3 = pattern.match(<span class="string">'123ABCD456ADBC789'</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">print(matched1)</span><br><span class="line">print(matched2)</span><br><span class="line">print(matched3)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 3), match&#x3D;&#39;123&#39;&gt;</span><br><span class="line">None</span><br><span class="line">&lt;re.Match object; span&#x3D;(7, 9), match&#x3D;&#39;45&#39;&gt;</span><br></pre></td></tr></table></figure><p>返回的编译对象的方法：</p><ul><li>group    获得一个或多个分组匹配的字符串</li><li>start      获取某个分组的起始位置</li><li>end        获取某个分组的结束位置</li><li>span      某个分组所在范围</li></ul><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">r'([a-z]+) ([a-z]+)'</span>, re.I)</span><br><span class="line">matched = pattern.match(<span class="string">"Hello world hey hi"</span>)</span><br><span class="line">print(matched.group())</span><br><span class="line">print(matched.group(<span class="number">1</span>))</span><br><span class="line">print(matched.end(<span class="number">1</span>))</span><br><span class="line">print(matched.start(<span class="number">1</span>))</span><br><span class="line">print(matched.span(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hello world</span><br><span class="line">Hello</span><br><span class="line">5</span><br><span class="line">0</span><br><span class="line">(6, 11)</span><br></pre></td></tr></table></figure><h3 id="findall函数"><a href="#findall函数" class="headerlink" title="findall函数"></a>findall函数</h3><p>找到所有匹配的子串</p><p>tips: match 和 search 只匹配一次</p><p>用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pattern.findall(string, start, end)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">r'\d+'</span>)</span><br><span class="line">result1 = pattern.findall(<span class="string">'hello12138 hexo 3684'</span>)</span><br><span class="line">result2 = pattern.findall(<span class="string">'hello12138 hexo 3684'</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">print(result1)</span><br><span class="line">print(result2)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#39;12138&#39;, &#39;3684&#39;]</span><br><span class="line">[&#39;12138&#39;]</span><br></pre></td></tr></table></figure><h3 id="finditer"><a href="#finditer" class="headerlink" title="finditer"></a>finditer</h3><p>找到所有匹配的子串，并返回迭代器</p><p>用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.finditer(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">itera = re.finditer(<span class="string">r'\d+'</span>, <span class="string">'abd12134afdasd434as454'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itera:</span><br><span class="line">    print(i)</span><br><span class="line">    print(i.group())</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(3, 8), match&#x3D;&#39;12134&#39;&gt;</span><br><span class="line">12134</span><br><span class="line">&lt;re.Match object; span&#x3D;(14, 17), match&#x3D;&#39;434&#39;&gt;</span><br><span class="line">434</span><br><span class="line">&lt;re.Match object; span&#x3D;(19, 22), match&#x3D;&#39;454&#39;&gt;</span><br><span class="line">454</span><br></pre></td></tr></table></figure><h3 id="split函数"><a href="#split函数" class="headerlink" title="split函数"></a>split函数</h3><p>按照匹配的子串将字符串分隔后返回列表</p><p>用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.split(pattern, string, maxsplit=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>参数：maxsplit    最大分隔次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(re.split(<span class="string">r'\W+'</span>, <span class="string">'runoob, runoob, runoob.'</span>))</span><br><span class="line">print(re.split(<span class="string">r'(\W+)'</span>, <span class="string">' runoob, runoob, runoob.'</span>))</span><br><span class="line">print(re.split(<span class="string">r'\W+'</span>, <span class="string">' runoob, runoob, runoob.'</span>, <span class="number">1</span>))</span><br><span class="line">print(re.split(<span class="string">r'a+'</span>, <span class="string">'hello world'</span>))  <span class="comment"># 对无匹配的字符串不会分隔</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&#39;runoob&#39;, &#39;runoob&#39;, &#39;runoob&#39;, &#39;&#39;]</span><br><span class="line">[&#39;&#39;, &#39; &#39;, &#39;runoob&#39;, &#39;, &#39;, &#39;runoob&#39;, &#39;, &#39;, &#39;runoob&#39;, &#39;.&#39;, &#39;&#39;]</span><br><span class="line">[&#39;&#39;, &#39;runoob, runoob, runoob.&#39;]</span><br><span class="line">[&#39;hello world&#39;]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 正则表达式 </tag>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基础语法</title>
      <link href="/2020/06/06/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/06/06/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a>1、标题</h2><p>‘#’代表一级标题, ‘##’代表二级标题, 以此类推，最多可到六级标题 。</p><p>tips: 记得加空格，在markdown语法中很多地方都需要在符号后加一个空格，因此最好养成打完符号后空格的习惯 。</p><h2 id="2、段落"><a href="#2、段落" class="headerlink" title="2、段落"></a>2、段落</h2><p>段落的换行可在段落的末尾打两个空格加回车 ，也可以直接使用一个空行。</p><h2 id="3、字体"><a href="#3、字体" class="headerlink" title="3、字体"></a>3、字体</h2><p>斜体：<code>*文本*</code>或者<code>_文本_</code>,效果：<em>文本</em>    <em>文本</em></p><p>粗体：<code>**文本**</code>或者<code>__文本__</code>，效果：<strong>文本</strong>  <strong>文本</strong></p><p>粗斜体：<code>***文本***</code>或者<code>___文本___</code>， 效果：<strong><em>文本</em></strong>  <strong><em>文本</em></strong></p><h2 id="4、分隔线"><a href="#4、分隔线" class="headerlink" title="4、分隔线"></a>4、分隔线</h2><p>使用<code>***</code>、<code>*****</code>、<code>----------</code></p><p>效果：</p><hr><hr><hr><h2 id="5、删除线"><a href="#5、删除线" class="headerlink" title="5、删除线"></a>5、删除线</h2><p>使用<code>~~文本~~</code>， 效果：<del>文本</del></p><h2 id="6、下划线"><a href="#6、下划线" class="headerlink" title="6、下划线"></a>6、下划线</h2><p>通过HTML的<code>&lt;u&gt;</code>标签实现， 用法：<code>&lt;u&gt;文本&lt;/u&gt;</code>， 效果：<u>文本</u>  </p><h2 id="7、脚注"><a href="#7、脚注" class="headerlink" title="7、脚注"></a>7、脚注</h2><p>创建脚注使用<code>[^文本]</code>， 效果：文字<a href="这是刚刚创建的脚注">^脚注文本</a></p><p>创建完毕后，可在markdown文件的底部写脚注。</p><h2 id="8、列表"><a href="#8、列表" class="headerlink" title="8、列表"></a>8、列表</h2><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>使用<code>*</code>、<code>+</code>或<code>-</code>。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br></pre></td></tr></table></figure><p><code>+</code>和<code>-</code>的用法相同。</p><p>效果：</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>使用数字加上<code>.</code></p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure><p>效果：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h3 id="9、列表嵌套"><a href="#9、列表嵌套" class="headerlink" title="9、列表嵌套"></a>9、列表嵌套</h3><p>只需在子列表的选项中添加四个空格或一个Tab键。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">* 第一项的第一个元素</span><br><span class="line">* 第一项的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">* 第二项的第一个元素</span><br><span class="line">* 第二项的第二个元素</span><br></pre></td></tr></table></figure><p>效果：</p><ol><li>第一项：<pre><code>* 第一项的第一个元素* 第一项的第二个元素</code></pre></li><li>第二项：<ul><li>第二项的第一个元素<ul><li>第二项的第二个元素</li></ul></li></ul></li></ol><p>其中的<code>*</code>也可换为<code>-</code>或<code>+</code>。</p><h2 id="10、区块"><a href="#10、区块" class="headerlink" title="10、区块"></a>10、区块</h2><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 区块的第一行</span><br><span class="line">&gt; 区块的第二行</span><br><span class="line">&gt; 区块的第三行</span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><p>区块的第一行<br>区块的第二行<br>区块的第三行</p></blockquote><h2 id="11、区块的嵌套"><a href="#11、区块的嵌套" class="headerlink" title="11、区块的嵌套"></a>11、区块的嵌套</h2><p><strong>区块与区块的嵌套：</strong></p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 第一层</span><br><span class="line">&gt; &gt; 第二层</span><br><span class="line">&gt; &gt; &gt; 第三层</span><br></pre></td></tr></table></figure><p>即不断增加<code>&gt;</code>号，<code>&gt;</code>之间的空格可有可无</p><p>效果：</p><blockquote><p>第一层</p><blockquote><p>第二层</p><blockquote><p>第三层</p></blockquote></blockquote></blockquote><p>区块中嵌套列表：</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1. 有序列表第一项</span><br><span class="line">&gt; 2. 有序列表第二项</span><br><span class="line">&gt; + 无序列表第一项</span><br><span class="line">&gt; + 无序列表第二项</span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><ol><li>有序列表第一项</li><li>有序列表第二项</li></ol><ul><li>无序列表第一项</li><li>无序列表第二项</li></ul></blockquote><p>列表中嵌套区块：</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+ 无序列表第一项</span><br><span class="line">&gt; 区块的第一行</span><br><span class="line">&gt; 区块的第二行</span><br><span class="line">+ 无序列表第二项</span><br><span class="line">&gt; 区块的第一行</span><br><span class="line">&gt; 区块的第二行</span><br><span class="line"></span><br><span class="line">1. 有序列表第一项</span><br><span class="line">&gt; 区块的第一行</span><br><span class="line">&gt; 区块的第二行</span><br><span class="line">2. 有序列表第二项</span><br><span class="line">&gt; 区块的第一行</span><br><span class="line">&gt; 区块的第二行</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li><p>无序列表第一项</p><blockquote><p>区块的第一行<br>区块的第二行</p></blockquote></li><li><p>无序列表第二项</p><blockquote><p>区块的第一行<br>区块的第二行</p></blockquote></li></ul><ol><li><p>有序列表第一项</p><blockquote><p>区块的第一行<br>区块的第二行</p></blockquote></li><li><p>有序列表第二项</p><blockquote><p>区块的第一行<br>区块的第二行</p></blockquote></li></ol><h2 id="12、代码"><a href="#12、代码" class="headerlink" title="12、代码"></a>12、代码</h2><p>小的代码片段(无需换行的代码)：</p><p>使用反引号`包裹住代码片段(反引号在键盘中数字1的左边，需使用英文输入模式)。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;print(&quot;Hello world!&quot;)&#96; 你好，世界！</span><br></pre></td></tr></table></figure><p>效果：</p><p><code>print(&quot;Hello world!&quot;)</code>你好，世界！</p><p>代码区块：</p><p>使用三个反引号包裹住代码区块：</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>def init():<br>    print(‘Hello world’)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def init():</span><br><span class="line">print(&#39;Hello world&#39;)</span><br></pre></td></tr></table></figure><h2 id="13、链接"><a href="#13、链接" class="headerlink" title="13、链接"></a>13、链接</h2><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[链接名称](链接地址)</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[snow zhao&#39;s blog](https:&#x2F;&#x2F;snowzhao.tk)</span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="https://snowzhao.tk">snow zhao’s blog</a></p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;https:&#x2F;&#x2F;snowzhao.tk&gt;</span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="https://snowzhao.tk">https://snowzhao.tk</a></p><p>高级链接：</p><p>使用变量来设置链接，然后在文档末尾设置变量的链接</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[地址名称][变量名]</span><br><span class="line"></span><br><span class="line">文档末尾:</span><br><span class="line">[变量名]: 链接地址</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[我的博客][blog]</span><br><span class="line"></span><br><span class="line">文档末尾：</span><br><span class="line">[blog]: https:&#x2F;&#x2F;snowzhao.tk</span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="https://snowzhao.tk">我的博客</a></p><h2 id="14、图片"><a href="#14、图片" class="headerlink" title="14、图片"></a>14、图片</h2><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line"></span><br><span class="line">![alt 属性文本](图片地址 “标题”)</span><br></pre></td></tr></table></figure><p>属性文本为图片的替代文字，标题可填可不填。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![scenery](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zhj12138&#x2F;CloudImage@master&#x2F;img&#x2F;221a0d7dbe3e98365133da901ac9deb1cc686ed0981052949ab9f5cf4f1fc94f.jpg)</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3poajEyMTM4L0Nsb3VkSW1hZ2VAbWFzdGVyL2ltZy8yMjFhMGQ3ZGJlM2U5ODM2NTEzM2RhOTAxYWM5ZGViMWNjNjg2ZWQwOTgxMDUyOTQ5YWI5ZjVjZjRmMWZjOTRmLmpwZw?x-oss-process=image/format,png" alt="scenery"></p><p>也可使用<code>&lt;img&gt;</code>标签来实现：</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zhj12138&#x2F;CloudImage@master&#x2F;img&#x2F;221a0d7dbe3e98365133da901ac9deb1cc686ed0981052949ab9f5cf4f1fc94f.jpg&quot; width&#x3D;&quot;100%&quot;&gt;</span><br></pre></td></tr></table></figure><p>其中src的值设为图片地址， width可用于控制图片大小。</p><p>效果：</p><img src="https://cdn.jsdelivr.net/gh/zhj12138/CloudImage@master/img/221a0d7dbe3e98365133da901ac9deb1cc686ed0981052949ab9f5cf4f1fc94f.jpg" width="100%"><h2 id="15、表格"><a href="#15、表格" class="headerlink" title="15、表格"></a>15、表格</h2><p><strong>分隔符</strong>：<code>|</code>用来分隔单元格, <code>-</code>用来分隔表头和其他行</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 表头 | 表头 |</span><br><span class="line">| --- | --- |</span><br><span class="line">| 单元格1 | 单元格2 |</span><br><span class="line">| 单元格3 | 单元格4 |</span><br></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格1</td><td>单元格2</td></tr><tr><td>单元格3</td><td>单元格4</td></tr></tbody></table><p><strong>对齐方式</strong>：</p><p>右对齐：<code>-:</code></p><p>左对齐：<code>:-</code></p><p>居中对齐：<code>:-:</code></p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :---- | ----: | :----: |</span><br><span class="line">| 单元格1| 单元格2| 单元格3 |</span><br><span class="line">| 单元格4| 单元格5| 单元格6 |</span><br></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格1</td><td align="right">单元格2</td><td align="center">单元格3</td></tr><tr><td align="left">单元格4</td><td align="right">单元格5</td><td align="center">单元格6</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言易错点</title>
      <link href="/2020/06/06/C%E8%AF%AD%E8%A8%80%E6%98%93%E9%94%99%E7%82%B9/"/>
      <url>/2020/06/06/C%E8%AF%AD%E8%A8%80%E6%98%93%E9%94%99%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言易错点"><a href="#C语言易错点" class="headerlink" title="C语言易错点"></a>C语言易错点</h1><p>1.sizeof是关键字而非函数。<br>     2.定义变量时，不能同时对多个变量连续赋初始值。<br>        eg：int m=n=1；//错误<br>     3.scanf语句：<br>       “%c”将读入空白符，”  %c”能忽略空白符。<br>        “%s”遇到空白符读入结束。<br>        ps：要想将有空格的字符串存入char型数组中，可使用gets(str) 或fgets(str,size,stdin)从标准输入设备中读入。但不建议使 用危险的gets(str),因为它无法限制输入字符串的长度，容易导致缓冲区溢出。两者的读入有所区别，fgets()读入换行符会将换行符作为字符串的一部分。<br>        scanf语句中没有精度修饰符。<br>        scanf语句输入数值时，读入结束的几种情况：<br>        1）遇到空白符<br>        2）达到域宽<br>        3）遇到非法输入<br>        scanf语句的返回值为读入的项数。未能成功读入返回0，调用函数失败或读到文件结束返回EOF(值为-1的宏)。<br>     4.小心&amp;&amp;与||的短路特性。<br>        eg：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(a&lt;<span class="number">0</span>&amp;&amp;b++&gt;<span class="number">2</span>)<span class="comment">//b++不会被执行</span></span><br><span class="line">a+=<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>   5.空指针不能解引用。<br>     6.函数的返回值可以是除了数组之外的任何类型。<br>     7.数组名是一个地址，不能改变。<br>        eg：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *p=a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,*(a+<span class="number">1</span>));<span class="comment">//合法</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,*(++a));<span class="comment">//不合法</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,*p);<span class="comment">//合法</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,*(++p));<span class="comment">//合法</span></span><br></pre></td></tr></table></figure><p>   8.共用体不能进行比较操作，也不能作为函数参数。<br>   9.局部变量可以屏蔽全局变量(就近原则)。<br>   10.同一个外部变量名在两个不同的文件中被声明为不同的类型，会导致C程序失效。<br>     11.使用宏定义完成类似函数的功能时，要注意括号的使用。<br>         eg：<code>#define cube(a)   a*a*a//不好</code><br>         当函数中调用cube(a+b)时，计算的将是<code>(a+(b*a)+(b*a)+b)</code>的<br>         值。<br>         改进：<code>#define cube  ((a)*(a)*(a))</code></p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈的基本操作</title>
      <link href="/2020/06/06/%E6%A0%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/06/06/%E6%A0%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构学习-Unit3栈与队列-栈"><a href="#数据结构学习-Unit3栈与队列-栈" class="headerlink" title="数据结构学习-Unit3栈与队列-栈"></a>数据结构学习-Unit3栈与队列-栈</h1><p>   栈是一种重要的线性结构，具有后进先出的特性。元素只能从栈顶端压入，也只能从栈顶端弹出。</p><p>   我们先来看栈的结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stac</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *top;</span><br><span class="line">    <span class="keyword">int</span> *bottom;</span><br><span class="line">    <span class="keyword">int</span> stacksize;</span><br><span class="line">&#125;Stack;</span><br></pre></td></tr></table></figure><p>top即栈顶，位置比最上方元素位置高一位。<br>bottom即栈底，位置指向最下方元素。<br>当栈为空时，有top==bottom</p><p>   栈有以下几种常用操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(Stack &amp;S)</span></span>;<span class="comment">//栈的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyStack</span><span class="params">(Stack &amp;S)</span></span>;<span class="comment">//摧毁栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearStack</span><span class="params">(Stack &amp;S)</span></span>;<span class="comment">//清空栈</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackEmpty</span><span class="params">(Stack S)</span></span>;<span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackLength</span><span class="params">(Stack S)</span></span>;<span class="comment">//求栈的长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetTop</span><span class="params">(Stack S,<span class="keyword">int</span> &amp;e)</span></span>;<span class="comment">//取得栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(Stack &amp;S,<span class="keyword">int</span> e)</span></span>;<span class="comment">//压入元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack &amp;S,<span class="keyword">int</span> &amp;e)</span></span>;<span class="comment">//弹出元素</span></span><br></pre></td></tr></table></figure><p>栈的初始化的实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(Stack &amp;S)</span><span class="comment">//初始化栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    S.bottom=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(SIZE*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">if</span>(S.bottom==<span class="literal">NULL</span>) <span class="built_in">exit</span>(<span class="number">1</span>)；</span><br><span class="line">    S.top=S.bottom;</span><br><span class="line">    S.stacksize=SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>压入元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(Stack &amp;S,<span class="keyword">int</span> e)</span><span class="comment">//压入</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top-S.bottom&gt;=SIZE)<span class="comment">//栈满的情况</span></span><br><span class="line">    &#123;</span><br><span class="line">        S.bottom=(<span class="keyword">int</span> *)<span class="built_in">realloc</span>(S.bottom,(ADD_SIZE+S.stacksize)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="keyword">if</span>(S.bottom==<span class="literal">NULL</span>) <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        S.top=S.bottom+S.stacksize;</span><br><span class="line">        S.stacksize=S.stacksize+ADD_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    *S.top++=e;<span class="comment">//top指向的位置的值改为e，然后top位置上升1位</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弹出元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack &amp;S,<span class="keyword">int</span> &amp;e)</span><span class="comment">//弹出</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==S.bottom)<span class="comment">//栈为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e=*--S.top;<span class="comment">//top位置下降一位，指向栈中最上方元素，再把该元素的值赋给e</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取得栈顶元素:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetTop</span><span class="params">(Stack S,<span class="keyword">int</span> &amp;e)</span><span class="comment">//返回栈顶元素(不同于Pop()函数)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==S.bottom)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error"</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    e=*(S.top<span class="number">-1</span>);<span class="comment">//注意对比Pop函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>摧毁栈：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyStack</span><span class="params">(Stack &amp;S)</span><span class="comment">//摧毁栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(S.bottom);</span><br><span class="line">    S.top=<span class="literal">NULL</span>;</span><br><span class="line">    S.bottom=<span class="literal">NULL</span>;</span><br><span class="line">    S.stacksize=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈的清空</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearStack</span><span class="params">(Stack &amp;S)</span><span class="comment">//清空栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S.top=S.bottom;<span class="comment">//其余的元素不需要做处理，因为压入元素时会自动覆盖原数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断栈是否为空：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackEmpty</span><span class="params">(Stack S)</span><span class="comment">//判断栈是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top==S.bottom)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//1表示空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//0表示非空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈的长度：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackLength</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (S.top-S.bottom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪吃蛇</title>
      <link href="/2020/06/06/%E8%B4%AA%E5%90%83%E8%9B%87/"/>
      <url>/2020/06/06/%E8%B4%AA%E5%90%83%E8%9B%87/</url>
      
        <content type="html"><![CDATA[<pre><code>贪吃蛇小游戏</code></pre><p>   刚学完C语言写的第一个小游戏，代码主要参考：<br><a href="https://blog.csdn.net/qq_37074040/article/details/54766680" target="_blank" rel="noopener">https://blog.csdn.net/qq_37074040/article/details/54766680</a><br>我在模仿代码的过程中发现了原作者程序中的一些bug，以下f附有我加以改进后的代码。</p><p>1.游戏界面<br>楼主认为这个小游戏游戏界面的核心在于光标的控制。只要我们能让光标到达我们想要的地方，我们就能完成游戏界面的绘制，蛋的生成。简直就像天上地下，无所不能。<br>实现:gotoxy()函数</p><p> 2.游戏体验感<br>如何将用户的输入读入，而不显示在屏幕上？<br>实现：getch()函数（包含在&lt;conio.h&gt;中）<br>如何防止用户的非法输入？玩游戏的过程中难免会摁到其他的键，如何让它不影响到我们的游戏？如果蛇在往前行走，我们控制方向向后，该怎么处理？<br>实现:保存蛇的前进状态。</p><p> 3.游戏关键<br> 蛇该如何打印？如何实现蛇的行走？<br> 如何完成吃蛋的过程？<br> 游戏结束的条件是什么？<br> 这几个问题都是实现游戏的关键步骤，但是实际操作起来并没有想象中的那么难，希望读者结合下文代码自行思考。</p><p>代码还可以大幅度优化，读者可以自行思考。</p><p>如果发现代码有bug，欢迎下方留言。</p><p>如果觉得楼主的代码对你有帮助的话，可以点个关注，点个赞，谢谢！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> frame_height 30<span class="comment">//地图尺寸</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> frame_width 50</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UP <span class="meta-string">'w'</span><span class="comment">//移动</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DOWN <span class="meta-string">'s'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT <span class="meta-string">'a'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT <span class="meta-string">'d'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i,j,k,sp,score;</span><br><span class="line"><span class="keyword">char</span> ch=UP,state=UP,choo,n;<span class="comment">//初始化方向</span></span><br><span class="line"><span class="keyword">int</span> grow=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Food</span>//食物</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;<span class="comment">//横坐标</span></span><br><span class="line">    <span class="keyword">int</span> y;<span class="comment">//纵坐标</span></span><br><span class="line">&#125; food;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Snake</span>//蛇</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/*用数组储存蛇的每一部分的坐标*/</span></span><br><span class="line">    <span class="keyword">int</span> x[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> y[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> len;<span class="comment">//长度</span></span><br><span class="line">    <span class="keyword">int</span> speed;<span class="comment">//速度</span></span><br><span class="line">&#125; snake;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">map</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//地图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_food</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//更新食物</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move_snake</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//蛇的移动</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">alive</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//判断蛇是否死亡</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_speed</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//更新速度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gotoxy</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;<span class="comment">//移动光标，进行游戏界面的打印</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        score=<span class="number">0</span>;<span class="comment">//初始化分数为0</span></span><br><span class="line">        <span class="comment">/*让用户进行难度选择，有彩蛋*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Choose the degree of difficulty:\n1:easy\t2:middle  3:difficult\n"</span>);</span><br><span class="line">        n=getch();</span><br><span class="line">        <span class="keyword">switch</span>(n)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            sp=<span class="number">300</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            sp=<span class="number">230</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            sp=<span class="number">180</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Congratulations!Welcome to Devil's difficulty\n"</span>);</span><br><span class="line">            sp=<span class="number">120</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        system(<span class="string">"cls"</span>);<span class="comment">//每次新一局游戏先清屏,包含在&lt;stdlib.h&gt;</span></span><br><span class="line">        <span class="built_in">map</span>();<span class="comment">//打印地图</span></span><br><span class="line">        <span class="comment">/*开始游戏*/</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            update_food();<span class="comment">//生产食物</span></span><br><span class="line">            get_speed();<span class="comment">//获取速度</span></span><br><span class="line">            move_snake();<span class="comment">//移动</span></span><br><span class="line">            Sleep(snake.speed);<span class="comment">//延时函数,speed数值越大延时越长</span></span><br><span class="line">            <span class="keyword">if</span>(!(alive()))<span class="comment">//判断蛇是否死亡</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//死亡则退出循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Game Over!\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1:Restart\t2:exit"</span>);</span><br><span class="line">        choo=getch();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(choo==<span class="string">'1'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">map</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="comment">/*打印第一个食物*/</span></span><br><span class="line">    <span class="comment">/*Attention!此处留了一个bug:可能食物</span></span><br><span class="line"><span class="comment">    的位置与初始的蛇重合，然后食物就会消</span></span><br><span class="line"><span class="comment">    失，读者可以加以改进*/</span></span><br><span class="line">    food.x=rand()%(frame_height<span class="number">-2</span>)+<span class="number">1</span>;</span><br><span class="line">    food.y=rand()%(frame_width<span class="number">-2</span>)+<span class="number">1</span>;<span class="comment">//在框内</span></span><br><span class="line">    gotoxy(food.x,food.y);<span class="comment">//把光标移动到该坐标</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"$"</span>);<span class="comment">//打印食物</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*snake的初始化*/</span></span><br><span class="line">    snake.x[<span class="number">0</span>]=frame_height/<span class="number">2</span>;</span><br><span class="line">    snake.y[<span class="number">0</span>]=frame_width/<span class="number">2</span>;</span><br><span class="line">    gotoxy(snake.x[<span class="number">0</span>],snake.y[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"@"</span>);</span><br><span class="line">    snake.len=<span class="number">3</span>;</span><br><span class="line">    snake.speed=<span class="number">200</span>;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;snake.len; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        snake.x[k]=snake.x[k<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">        snake.y[k]=snake.y[k<span class="number">-1</span>];</span><br><span class="line">        gotoxy(snake.x[k],snake.y[k]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"@"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*墙壁*/</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;frame_width; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        gotoxy(<span class="number">0</span>,j);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"#"</span>);</span><br><span class="line">        gotoxy(frame_height<span class="number">-1</span>,j);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"#"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;frame_height<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        gotoxy(i,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"#"</span>);</span><br><span class="line">        gotoxy(i,frame_width<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"#"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    gotoxy(<span class="number">2</span>,frame_width+<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="string">'1'</span>) <span class="built_in">printf</span>(<span class="string">"Difficulty:   easy"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="string">'2'</span>) <span class="built_in">printf</span>(<span class="string">"Difficulty:   middle"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="string">'3'</span>) <span class="built_in">printf</span>(<span class="string">"Difficulty:   difficult"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Welcome to the Devil's difficulty"</span>);</span><br><span class="line">    gotoxy(<span class="number">4</span>,frame_width+<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"UP:   w"</span>);</span><br><span class="line">    gotoxy(<span class="number">6</span>,frame_width+<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"DOWN: s"</span>);</span><br><span class="line">    gotoxy(<span class="number">8</span>,frame_width+<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"LEFT: a"</span>);</span><br><span class="line">    gotoxy(<span class="number">10</span>,frame_width+<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"RIGHT:d"</span>);</span><br><span class="line">    gotoxy(<span class="number">12</span>,frame_width+<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your score:%d"</span>,score);</span><br><span class="line">    gotoxy(<span class="number">28</span>,frame_width+<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Made by Zhao Hejie"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*食物*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_food</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(snake.x[<span class="number">0</span>]==food.x&amp;&amp;snake.y[<span class="number">0</span>]==food.y)<span class="comment">//吃到食物</span></span><br><span class="line">    &#123;</span><br><span class="line">        score+=<span class="number">10</span>;</span><br><span class="line">        gotoxy(<span class="number">12</span>,frame_width+<span class="number">3</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Your score:%d"</span>,score);</span><br><span class="line">        srand(time(<span class="literal">NULL</span>));</span><br><span class="line">        <span class="comment">/*以下是更新食物的代码,里面排除了</span></span><br><span class="line"><span class="comment">        食物与蛇重合的情况,读者可以参考以</span></span><br><span class="line"><span class="comment">        下代码完成对上述bug的改进*/</span></span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">1</span>;<span class="comment">//标记变量</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">        food.x=rand()%(frame_height<span class="number">-2</span>)+<span class="number">1</span>;</span><br><span class="line">        food.y=rand()%(frame_width<span class="number">-2</span>)+<span class="number">1</span>;<span class="comment">//在框内</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;snake.len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(food.x==snake.x[i]&amp;&amp;food.y==snake.y[i])</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="number">0</span>;<span class="comment">//有重合</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(flag==<span class="number">0</span>);</span><br><span class="line">        <span class="comment">/*打印食物*/</span></span><br><span class="line">        gotoxy(food.x,food.y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"$"</span>);</span><br><span class="line">        snake.len++;</span><br><span class="line">        grow=<span class="number">1</span>;<span class="comment">//表明长了，在move_snake函数中有用到</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*移动蛇*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move_snake</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(kbhit())<span class="comment">//键盘有输入</span></span><br><span class="line">    &#123;</span><br><span class="line">        ch=getch();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!grow)<span class="comment">//没有长</span></span><br><span class="line">    &#123;</span><br><span class="line">        gotoxy(snake.x[snake.len<span class="number">-1</span>],snake.y[snake.len<span class="number">-1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" "</span>);<span class="comment">//走了，在数组的最后打印空格，清除原有的蛇尾</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(k=snake.len<span class="number">-1</span>; k&gt;<span class="number">0</span>; k--)<span class="comment">//更新蛇的坐标，除了蛇头,其余位置继承上一个点的坐标</span></span><br><span class="line">    &#123;</span><br><span class="line">        snake.x[k]=snake.x[k<span class="number">-1</span>];</span><br><span class="line">        snake.y[k]=snake.y[k<span class="number">-1</span>];<span class="comment">//移动位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span>(ch)<span class="comment">//改变方向</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> UP:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(state==DOWN)<span class="comment">//如果此时方向向下，输入向上的作用要被无视</span></span><br><span class="line">        &#123;</span><br><span class="line">            snake.x[<span class="number">0</span>]++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            snake.x[<span class="number">0</span>]--;</span><br><span class="line">            state=UP;<span class="comment">//其余的改变状态为向上</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> DOWN:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(state==UP)</span><br><span class="line">        &#123;</span><br><span class="line">            snake.x[<span class="number">0</span>]--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            snake.x[<span class="number">0</span>]++;</span><br><span class="line">            state=DOWN;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> LEFT:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(state==RIGHT)</span><br><span class="line">        &#123;</span><br><span class="line">            snake.y[<span class="number">0</span>]++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            snake.y[<span class="number">0</span>]--;</span><br><span class="line">            state=LEFT;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> RIGHT:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(state==LEFT)</span><br><span class="line">        &#123;</span><br><span class="line">            snake.y[<span class="number">0</span>]--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            snake.y[<span class="number">0</span>]++;</span><br><span class="line">            state=RIGHT;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*摁其余键,保持原有状态*/</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(state==DOWN)</span><br><span class="line">        &#123;</span><br><span class="line">            snake.x[<span class="number">0</span>]++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(state==UP)</span><br><span class="line">        &#123;</span><br><span class="line">            snake.x[<span class="number">0</span>]--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(state==LEFT)</span><br><span class="line">        &#123;</span><br><span class="line">            snake.y[<span class="number">0</span>]--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(state==RIGHT)</span><br><span class="line">        &#123;</span><br><span class="line">            snake.y[<span class="number">0</span>]++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    gotoxy(snake.x[<span class="number">0</span>],snake.y[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"@"</span>);<span class="comment">//打印蛇头</span></span><br><span class="line">    grow=<span class="number">0</span>;<span class="comment">//初始成长状态为0</span></span><br><span class="line">    gotoxy(frame_height,<span class="number">0</span>);<span class="comment">//光标移动到地图左下角下方</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*存活状态*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">alive</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(snake.x[<span class="number">0</span>]==<span class="number">0</span>||snake.x[<span class="number">0</span>]==frame_height<span class="number">-1</span>||snake.y[<span class="number">0</span>]==<span class="number">0</span>||snake.y[<span class="number">0</span>]==frame_width<span class="number">-1</span>)<span class="comment">//撞墙</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;snake.len; k++) <span class="comment">//咬到自己</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(snake.x[<span class="number">0</span>]==snake.x[k]&amp;&amp;snake.y[<span class="number">0</span>]==snake.y[k])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*加速*/</span></span><br><span class="line"><span class="comment">/*speed越大,蛇的速度越小*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_speed</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(snake.len&lt;=<span class="number">6</span>)</span><br><span class="line">        snake.speed=sp;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(snake.len&lt;=<span class="number">10</span>)</span><br><span class="line">        snake.speed=sp<span class="number">-20</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(snake.len&lt;=<span class="number">20</span>)</span><br><span class="line">        snake.speed=sp<span class="number">-50</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(snake.len&lt;=<span class="number">30</span>)</span><br><span class="line">        snake.speed=sp<span class="number">-60</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        snake.speed=sp<span class="number">-70</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*移动光标*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gotoxy</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hout;</span><br><span class="line">    COORD cor;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    typedef struct _COORD</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        SHORT X; // horizontal coordinate</span></span><br><span class="line"><span class="comment">        SHORT Y; // vertical coordinate</span></span><br><span class="line"><span class="comment">    &#125; COORD;</span></span><br><span class="line"><span class="comment">    用该结构体来储存坐标</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    hout=GetStdHandle(STD_OUTPUT_HANDLE);<span class="comment">//从标准输出设备中取得一个句柄</span></span><br><span class="line">    <span class="comment">/*这其中x,y的赋值对象要注意,不懂的好好想想*/</span></span><br><span class="line">    cor.X=y;</span><br><span class="line">    cor.Y=x;</span><br><span class="line">    SetConsoleCursorPosition(hout,cor);<span class="comment">//定位光标的函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> games </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
